{"version":3,"sources":["context/AppReducer.js","constants/GameState.js","context/GameState.js","services/GameService.js","components/Piece/Piece.js","components/GameSpace/GameSpace.js","components/ChalkBoard/ChalkBoard.js","components/Modal/Modal.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["state","action","type","showModal","payload","show","board","updatedBoard","players","currentPlayerTurn","initBoardArray","BOARD_INDICES","A","B","C","D","E","F","G","H","I","BOARD_SLOTS","WINNERS","WINNERS_BY_SLOT","initialState","numPlayers","one","score","highScore","isComputer","displayName","piece","selected","two","newPlayer","GameContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","updateModal","updateBoard","nextTurn","playerKey","selectPlayer","playerCode","otherPlayer","updateScore","resetGame","swapPlayer","oneScoreHolder","oneHighScoreHolder","gameState","winning","playerPiece","getComputerPick","computerPiece","miniMax","boardArr","currentPiece","availableSpots","retArr","map","slot","index","push","emptyIndecies","length","bestMove","moves","i","move","result","bestScore","j","isWinSubArray","sub","master","matches","ret","indexOf","Piece","props","useContext","boardIndex","slotId","GameSpace","player","handleClick","id","updateBoardProceedTurn","checkForBlock","isGameOver","setTimeout","nextPlayer","emptySlots","filter","selectedSlots","forEach","slotIndex","some","selectedSlot","winners","winner","checkWinCondition","handleUpdateScore","handleScoreReset","handleUpdateScoreEqual","oppPiece","blockCheck","winSlotId","scoreChange","currentPlayer","useEffect","takeComputerTurn","className","onClick","e","target","ChalkBoard","Modal","showHideClassName","Game","handleSelection","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0SAAe,WAACA,EAAOC,GACnB,OAAOA,EAAOC,MAEV,IAAK,eACD,OAAO,eACAF,EADP,CAEIG,UAAWF,EAAOG,QAAQC,OAGlC,IAAK,eACD,sBACOL,EADP,CAEIM,MAAOL,EAAOG,QAAQG,aACtBC,QAASP,EAAOG,QAAQI,UAGhC,IAAK,YACD,sBACOR,EADP,CAEIS,kBAAmBR,EAAOG,QAAQK,oBAG1C,IAAK,aAML,IAAK,eACD,sBACOT,EADP,CAEIQ,QAASP,EAAOG,QAAQI,UAGhC,IAAK,aACD,sBACOR,EADP,CAEIQ,QAASP,EAAOG,QAAQI,QACxBC,kBAAmBR,EAAOG,QAAQK,kBAClCH,MAAOL,EAAOG,QAAQE,QAG9B,QACI,OAAON,IC3CNU,EAAiB,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAE1CC,EAAgB,CACzBC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GAGMC,EAAc,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAEtDC,EAAU,CACZ,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,KACX,CAAC,IAAK,IAAK,MAGFC,EAAkB,CAC3BX,EAAG,CAACU,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,IACpCT,EAAG,CAACS,EAAQ,GAAIA,EAAQ,IACxBR,EAAG,CAACQ,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,IACpCP,EAAG,CAACO,EAAQ,GAAIA,EAAQ,IACxBN,EAAG,CAACM,EAAQ,GAAIA,EAAQ,GAAIA,EAAQ,IACpCL,EAAG,CAACK,EAAQ,GAAGA,EAAQ,IACvBJ,EAAG,CAACI,EAAQ,GAAGA,EAAQ,GAAGA,EAAQ,IAClCH,EAAG,CAACG,EAAQ,GAAGA,EAAQ,IACvBF,EAAG,CAACE,EAAQ,GAAGA,EAAQ,GAAGA,EAAQ,KAWzBE,EAAe,CACxBrB,WAAW,EACXsB,WAAY,KACZhB,kBAX2B,MAY3BD,QAAS,CACLkB,IAAK,CACDC,MAAO,EACPC,UAAW,EACXC,YAAY,EACZC,YAAa,WACbC,MAhBoB,IAiBpBC,SAAU,IAEdC,IAAK,CACDN,MAAO,EACPC,UAAW,EACXC,YAAY,EACZC,YAAa,WACbC,MApBoB,IAqBpBC,SAAU,KAGlB1B,MAAOI,GAGEwB,EAAY,SAACL,EAAYE,GAAqC,IAA9BJ,EAA6B,uDAArB,EAAGC,EAAkB,uDAAN,EAC1DE,EAhCsB,MAgCRC,EAEZF,EAAU,iCAKVA,EAAU,iCAIlB,MAAO,CACHA,aACAC,cACAH,QACAC,YACAG,QACAC,SAAU,KC3ELG,EAAcC,wBAAcZ,GAG5Ba,EAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAClBC,qBAAWC,EAAYhB,GADL,mBACrCxB,EADqC,KAC9ByC,EAD8B,KAiI5C,OACI,kBAACN,EAAYO,SAAb,CAAsBC,MAAO,CACzBC,YA1HR,SAAqBvC,GACjBoC,EAAS,CACLvC,KAAM,eACNE,QAAS,CACLC,WAuHJwC,YA7GR,SAAqBtC,EAAcC,GAC/BiC,EAAS,CACLvC,KAAM,eACNE,QAAS,CACLG,eACAC,cAyGJsC,SAhGR,SAAkBC,GACdN,EAAS,CACLvC,KAAM,YACNE,QAAS,CACLK,kBAAmBsC,MA6FvBC,aArDR,SAAsBC,GAClB,IAAMC,ED7DiB,QC6DHD,EDzDG,MAJA,MC8DjBzC,EAAO,eAAOR,EAAMQ,SAE1BA,EAAQyC,GAAcf,GAAU,EAAO1B,EAAQyC,GAAYlB,OAC3DvB,EAAQ0C,GAAehB,GAAU,EAAM1B,EAAQ0C,GAAanB,OAE5DU,EAAS,CACLvC,KAAM,aACNE,QAAS,CACLI,cA4CJ2C,YArFR,SAAqB3C,GACjBiC,EAAS,CACLvC,KAAM,eACNE,QAAQ,CACJI,cAkFJ4C,UA1ER,WACI,IAAM5C,EAAO,eAAOR,EAAMQ,SAC1BA,EAAQkB,IAAIM,SAAW,GACvBxB,EAAQyB,IAAID,SAAW,GAEvBS,EAAS,CACLvC,KAAM,aACNE,QAAS,CACLI,UACAC,kBDlDe,MCmDfH,MAAOI,MAiEX2C,WAtCR,WACI,IAAM7C,EAAO,eAAOR,EAAMQ,SAC1BA,EAAQkB,IAAIM,SAAW,GACvBxB,EAAQyB,IAAID,SAAW,GAEvBxB,EAAQkB,IAAIG,YAAcrB,EAAQkB,IAAIG,WACtCrB,EAAQyB,IAAIJ,YAAcrB,EAAQyB,IAAIJ,WAEtC,IAAMyB,EAAiB9C,EAAQkB,IAAIC,MAC7B4B,EAAqB/C,EAAQkB,IAAIE,UAEvCpB,EAAQkB,IAAIC,MAAQnB,EAAQyB,IAAIN,MAChCnB,EAAQkB,IAAIE,UAAYpB,EAAQyB,IAAIL,UAEpCpB,EAAQyB,IAAIN,MAAQ2B,EACpB9C,EAAQyB,IAAIL,UAAY2B,EAExB/C,EAAQkB,IAAII,YAActB,EAAQkB,IAAIG,WAAZ,iCAC1BrB,EAAQyB,IAAIH,YAActB,EAAQyB,IAAIJ,WAAZ,iCAE1BY,EAAS,CACLvC,KAAM,aACNE,QAAS,CACLI,UACAC,kBDtGe,MCuGfH,MAAOI,MAcX8C,UAAWxD,IAEVsC,I,2BCtIb,SAASmB,EAAQnD,EAAOoD,GACpB,OACKpD,EAAM,KAAOoD,GAAepD,EAAM,KAAOoD,GAAepD,EAAM,KAAOoD,GACrEpD,EAAM,KAAOoD,GAAepD,EAAM,KAAOoD,GAAepD,EAAM,KAAOoD,GACrEpD,EAAM,KAAOoD,GAAepD,EAAM,KAAOoD,GAAepD,EAAM,KAAOoD,GACrEpD,EAAM,KAAOoD,GAAepD,EAAM,KAAOoD,GAAepD,EAAM,KAAOoD,GACrEpD,EAAM,KAAOoD,GAAepD,EAAM,KAAOoD,GAAepD,EAAM,KAAOoD,GACrEpD,EAAM,KAAOoD,GAAepD,EAAM,KAAOoD,GAAepD,EAAM,KAAOoD,GACrEpD,EAAM,KAAOoD,GAAepD,EAAM,KAAOoD,GAAepD,EAAM,KAAOoD,GACrEpD,EAAM,KAAOoD,GAAepD,EAAM,KAAOoD,GAAepD,EAAM,KAAOoD,EAoFvE,SAASC,EAAgBrD,EAAOsD,GAInC,OA5EJ,SAASC,EAAQC,EAAUF,EAAeF,EAAaK,GAInD,IAAMC,EA3CV,SAAuB1D,GACnB,IAAI2D,EAAS,GAQb,OAPA3D,EAAM4D,KAAK,SAACC,EAAMC,GAId,MF6BwB,MEhCrBD,GFoCqB,MEpCQA,GAC5BF,EAAOI,KAAKD,IAET,KAGJH,EAkCgBK,CAAcR,GAErC,GAAIL,EAAQK,EAAUJ,GAElB,MAAO,CAAE/B,OAAQ,KAEhB,GAAI8B,EAAQK,EAAUF,GAEvB,MAAO,CAAEjC,MAAO,KAEf,GAA6B,IAA1BqC,EAAeO,OAEnB,MAAO,CAAE5C,MAAO,GAKpB,IAFA,IAsBI6C,EAtBEC,EAAQ,GAENC,EAAI,EAAGA,EAAIV,EAAeO,OAAQG,IAAI,CAC1C,IAAMC,EAAO,GAMb,GALAA,EAAKP,MAAQJ,EAAeU,GAG5BZ,EAASE,EAAeU,IAAMX,EAE3BA,IAAiBH,EAAc,CAC9B,IAAMgB,EAASf,EAAQC,EAAUF,EAAeF,EAAaA,GAC7DiB,EAAKhD,MAAQiD,EAAOjD,UAEpB,CACA,IAAMiD,EAASf,EAAQC,EAAUF,EAAeF,EAAaE,GAC7De,EAAKhD,MAAQiD,EAAOjD,MAGxBmC,EAASE,EAAeU,IAAM,GAC9BD,EAAMJ,KAAKM,GAIf,GAAGZ,IAAiBH,EAGhB,IAFA,IAAIiB,GAAa,MAETC,EAAI,EAAGA,EAAIL,EAAMF,OAAQO,IAC1BL,EAAMK,GAAGnD,MAAQkD,IAChBA,EAAYJ,EAAMK,GAAGnD,MACrB6C,EAAWM,QAOnB,IAFA,IAAID,EAAY,QAERC,EAAI,EAAGA,EAAIL,EAAMF,OAAQO,IAC1BL,EAAMK,GAAGnD,MAAQkD,IAChBA,EAAYJ,EAAMK,GAAGnD,MACrB6C,EAAWM,GAKvB,OAAOL,EAAMD,GAWAX,CAAQvD,EAAOsD,EF9EA,ME6ERA,EFzEQ,IAJA,IE8E4BA,GAE5CQ,MAST,IAAMW,EAAgB,SAACC,EAAKC,GAC/B,IAAIC,EAAU,EACVC,GAAM,EACV,IAAI,IAAIf,KAASY,EACb,GAAGC,EAAOG,QAAQJ,EAAIZ,KAAW,IAC7Bc,GAAW,IAEG,EAAE,CACZC,GAAM,EACN,MAIZ,OAAOA,G,MCzHIE,MAdf,SAAeC,GAAQ,IAEZ9B,EAAa+B,qBAAWpD,GAAxBqB,UAEDgC,EAAa7E,EAAc2E,EAAMG,QAEvC,OACI,8BACKjC,EAAUlD,MAAMkF,KCgPdE,MAzOf,WAAsB,IAQdpF,EACAqF,EATa,EAOTJ,qBAAWpD,GALXqB,EAFS,EAETA,UACAX,EAHS,EAGTA,YACAC,EAJS,EAITA,SACAK,EALS,EAKTA,YACAC,EANS,EAMTA,UAUFwC,EAAc,SAACC,GAEbF,EAAO9D,YAEPiE,EADmBnF,EAAckF,KAkBnCC,EAAyB,SAACN,GAE5B,GAAyB,KAAtBlF,EAAMkF,GAAmB,CAExBlF,EAAMkF,GAAcG,EAAO5D,MAE3B,IAAMvB,EAAUgD,EAAUhD,QAQ1B,GAPAA,EAAQgD,EAAU/C,mBAAmBuB,SAASqC,KAAKmB,GACnD3C,EAAYvC,EAAOE,GAGnBuF,EAAeP,EAAYG,EAAO5D,OAG/BiE,IACCC,YAAW,WACP7C,MJwBU,SIrBd,CACA,IAAM8C,EJzCS,QIyCI1C,EAAU/C,kBJrCd,MAJA,MI0CfqC,EAASoD,MA+BfF,EAAa,WACf,IAAMG,EAAa7F,EAAM8F,QAAQ,SAAAjC,GAAI,MAAa,KAATA,KAAaI,OACtD,OAzBsB,WACtB,IAAM8B,EAAgB,GAgBtB,OAfAV,EAAO3D,SAASsE,SAAS,SAAAC,GACrBF,EAAchC,KAAKhD,EAAYkF,OAGvBF,EAAcG,MAAM,SAACC,EAAcrC,GAC3C,IAAMsC,EAAUnF,EAAgBkF,GADqB,uBAGrD,IAAI,IAAJ,IAAoBC,EAApB,+CAA4B,CAAC,IAAnBC,EAAkB,QACxB,GAAG5B,EAAc4B,EAAQN,GACrB,OAAO,GALsC,kFAQrD,OAAO,KAWRO,IACCC,EJnBc,IIoBdC,KACO,GAEY,IAAfX,IACJY,EJtBc,IIuBP,IAaThB,EAAgB,SAACP,EAAY9B,GAC/B,IACMsD,EJ/FkB,MI+FPtD,EJ3FO,IAJA,IIiGRnC,EAHDF,EAAYmE,IAInBc,SAAS,SAAAK,GACb,IAAIM,EAAa,EAEjBN,EAAOL,SAAS,SAAAY,GAGT5G,EAFkBK,EAAcuG,MAERF,IACvBC,GAAc,MAIJ,IAAfA,GACCJ,EJzDY,OImElBA,EAAoB,SAACM,GACvB,IAAM3G,EAAO,eAAOgD,EAAUhD,SAExB4G,EAAgB5G,EAAQgD,EAAU/C,mBAExC2G,EAAczF,OAASwF,EAEpBC,EAAczF,MAAQyF,EAAcxF,YACnCwF,EAAcxF,UAAYwF,EAAczF,OAG5CwB,EAAY3C,IAOVuG,EAAyB,SAACI,GAC5B,IAAM3G,EAAO,eAAOgD,EAAUhD,SAE9BA,EAAQkB,IAAIC,OAASwF,EACrB3G,EAAQyB,IAAIN,OAASwF,EAElB3G,EAAQkB,IAAIC,MAAQnB,EAAQkB,IAAIE,YAC/BpB,EAAQkB,IAAIE,UAAYpB,EAAQkB,IAAIC,OAErCnB,EAAQyB,IAAIN,MAAQnB,EAAQyB,IAAIL,YAC/BpB,EAAQyB,IAAIL,UAAYpB,EAAQyB,IAAIN,OAGxCwB,EAAY3C,IAMVsG,EAAmB,WACrB,IAAMtG,EAAO,eAAOgD,EAAUhD,UJhKP,QIiKHgD,EAAU/C,kBAAwCD,EAAO,IAAoBA,EAAO,KAE5FmB,MAAQ,EAEpBwB,EAAY3C,IAahB,OAVA6G,qBAAU,WACN/G,EAAK,YAAOkD,EAAUlD,QACtBqF,EAAM,eAAOnC,EAAUhD,QAAQgD,EAAU/C,qBAE/BoB,YAjKW,WACrB,IAAM2D,EAAa7B,EAAgBrD,EAAOqF,EAAO5D,OACjD+D,EAAuBN,GAgKnB8B,MAMJ,yBAAKzB,GAAG,aACJ,yBAAKA,GAAG,UAAU0B,UAAU,OACxB,yBAAKA,UAAU,eAAe1B,GAAG,IAAI2B,QAAS,SAACC,GAAQ7B,EAAY6B,EAAEC,OAAO7B,MACxE,kBAAC,EAAD,CAAOJ,OAAO,OAElB,yBAAK8B,UAAU,cAAc1B,GAAG,IAAI2B,QAAS,SAACC,GAAQ7B,EAAY6B,EAAEC,OAAO7B,MACvE,kBAAC,EAAD,CAAOJ,OAAO,OAElB,yBAAK8B,UAAU,gBAAgB1B,GAAG,IAAI2B,QAAS,SAACC,GAAQ7B,EAAY6B,EAAEC,OAAO7B,MACzE,kBAAC,EAAD,CAAOJ,OAAO,QAGtB,yBAAKI,GAAG,UAAU0B,UAAU,OACxB,yBAAKA,UAAU,eAAe1B,GAAG,IAAI2B,QAAS,SAACC,GAAQ7B,EAAY6B,EAAEC,OAAO7B,MACxE,kBAAC,EAAD,CAAOJ,OAAO,OAElB,yBAAK8B,UAAU,cAAc1B,GAAG,IAAI2B,QAAS,SAACC,GAAQ7B,EAAY6B,EAAEC,OAAO7B,MACvE,kBAAC,EAAD,CAAOJ,OAAO,OAElB,yBAAK8B,UAAU,gBAAgB1B,GAAG,IAAI2B,QAAS,SAACC,GAAQ7B,EAAY6B,EAAEC,OAAO7B,MACzE,kBAAC,EAAD,CAAOJ,OAAO,QAGtB,yBAAKI,GAAG,UAAU0B,UAAU,OACxB,yBAAKA,UAAU,eAAe1B,GAAG,IAAI2B,QAAS,SAACC,GAAQ7B,EAAY6B,EAAEC,OAAO7B,MACxE,kBAAC,EAAD,CAAOJ,OAAO,OAElB,yBAAK8B,UAAU,cAAc1B,GAAG,IAAI2B,QAAS,SAACC,GAAQ7B,EAAY6B,EAAEC,OAAO7B,MACvE,kBAAC,EAAD,CAAOJ,OAAO,OAElB,yBAAK8B,UAAU,gBAAgB1B,GAAG,IAAI2B,QAAS,SAACC,GAAQ7B,EAAY6B,EAAEC,OAAO7B,MACzE,kBAAC,EAAD,CAAOJ,OAAO,UCxMjBkC,MA1CjB,WAAuB,IAAD,EAEYpC,qBAAWpD,GAApCqB,EAFa,EAEbA,UAAWH,EAFE,EAEFA,WAElB,OACE,yBAAKwC,GAAG,cACN,yBAAKA,GAAG,mBACN,sCACA,6BACA,4BACE,8CACA,qDACA,qDACA,qDACA,2DAEF,8BAEF,kBAAC,EAAD,MACA,yBAAKA,GAAG,cACN,yBAAKA,GAAG,8BACN,4BAAKrC,EAAUhD,QAAQkB,IAAII,aAC3B,wCAAc0B,EAAUhD,QAAQkB,IAAIC,OACpC,6CAAmB6B,EAAUhD,QAAQkB,IAAIE,YAE3C,yBAAKiE,GAAG,8BACN,4BAAKrC,EAAUhD,QAAQyB,IAAIH,aAC3B,wCAAc0B,EAAUhD,QAAQyB,IAAIN,OACpC,6CAAmB6B,EAAUhD,QAAQyB,IAAIL,aAG7C,yBAAKiE,GAAG,UACN,yBAAKA,GAAG,eACR,yBAAKA,GAAG,mBAEV,yBAAKA,GAAG,sBACN,4BAAQA,GAAG,WAAW2B,QAAS,WAAQnE,MAAvC,mBC7BOuE,EAZD,SAAC,GAAsB,IAArBvH,EAAoB,EAApBA,KAAMiC,EAAc,EAAdA,SACZuF,EAAoBxH,EAAO,QAAU,aAE3C,OACI,yBAAKkH,UAAWM,GACZ,6BAASN,UAAU,cACdjF,KC0BFwF,MAxBf,WAAiB,IAAD,EAEiCvC,qBAAWpD,GAAnDqB,EAFO,EAEPA,UAAWR,EAFJ,EAEIA,aAAcJ,EAFlB,EAEkBA,YAE1BzC,EAAYqD,EAAUrD,UAEtB4H,EAAkB,SAAC9E,GACvBD,EAAaC,GACbL,GAAY,IAGd,OACE,yBAAKiD,GAAG,QACN,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOxF,KAAMF,GACX,6CACA,iDACA,4BAAQoH,UAAU,YAAYC,QAAS,kBAAMO,EPYtB,SOZvB,KACA,4BAAQR,UAAU,YAAYC,QAAS,kBAAMO,EPetB,SOfvB,QCdOC,MATf,WAEI,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,QCGQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.63cc7924.chunk.js","sourcesContent":["export default (state, action) => {\r\n    switch(action.type){\r\n\r\n        case 'UPDATE_MODAL':\r\n            return {\r\n                ...state,\r\n                showModal: action.payload.show\r\n            };\r\n\r\n        case 'UPDATE_BOARD':\r\n            return{\r\n                ...state,\r\n                board: action.payload.updatedBoard,\r\n                players: action.payload.players\r\n            };\r\n        \r\n        case 'NEXT_TURN':\r\n            return{\r\n                ...state,\r\n                currentPlayerTurn: action.payload.currentPlayerTurn\r\n            };\r\n\r\n        case 'SET_PLAYER':\r\n            return{\r\n                ...state,\r\n                players: action.payload.players\r\n            };\r\n\r\n        case 'UPDATE_SCORE':\r\n            return{\r\n                ...state,\r\n                players: action.payload.players\r\n            }\r\n\r\n        case 'RESET_GAME':\r\n            return{\r\n                ...state,\r\n                players: action.payload.players,\r\n                currentPlayerTurn: action.payload.currentPlayerTurn,\r\n                board: action.payload.board\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","export const initBoardArray = ['','','','','','','','',''];\r\n\r\nexport const BOARD_INDICES = {\r\n    A: 0,\r\n    B: 1,\r\n    C: 2,\r\n    D: 3,\r\n    E: 4,\r\n    F: 5,\r\n    G: 6,\r\n    H: 7,\r\n    I: 8\r\n};\r\n\r\nexport const BOARD_SLOTS = ['A','B','C','D','E','F','G','H','I'];\r\n\r\nconst WINNERS = [\r\n    [\"A\", \"B\", \"C\"], //0\r\n    [\"D\", \"E\", \"F\"], //1\r\n    [\"G\", \"H\", \"I\"], //2\r\n    [\"A\", \"D\", \"G\"], //3\r\n    [\"B\", \"E\", \"H\"], //4\r\n    [\"C\", \"F\", \"I\"], //5\r\n    [\"A\", \"E\", \"I\"], //6\r\n    [\"C\", \"E\", \"G\"] //7\r\n]\r\n//All winning slot ID arrays\r\nexport const WINNERS_BY_SLOT = {\r\n    A: [WINNERS[0], WINNERS[3], WINNERS[6]],\r\n    B: [WINNERS[0], WINNERS[4]],\r\n    C: [WINNERS[0], WINNERS[5], WINNERS[7]],\r\n    D: [WINNERS[1], WINNERS[3]],\r\n    E: [WINNERS[1], WINNERS[4], WINNERS[6]],\r\n    F: [WINNERS[1],WINNERS[5]],\r\n    G: [WINNERS[2],WINNERS[3],WINNERS[7]],\r\n    H: [WINNERS[2],WINNERS[4]],\r\n    I: [WINNERS[2],WINNERS[5],WINNERS[6]]\r\n}\r\n\r\nexport const PLAYER_ONE_CODE = 'one';\r\n\r\nexport const PLAYER_ONE_PIECE = 'X';\r\n\r\nexport const PLAYER_TWO_CODE = 'two';\r\n\r\nexport const PLAYER_TWO_PIECE = 'O';\r\n\r\nexport const initialState = {\r\n    showModal: true,\r\n    numPlayers: null,\r\n    currentPlayerTurn: PLAYER_ONE_CODE,\r\n    players: {\r\n        one: {\r\n            score: 0,\r\n            highScore: 0,\r\n            isComputer: false,\r\n            displayName: 'Player 1',\r\n            piece: PLAYER_ONE_PIECE,\r\n            selected: []\r\n        },\r\n        two: {\r\n            score: 0,\r\n            highScore: 0,\r\n            isComputer: false,\r\n            displayName: 'Player 2',\r\n            piece: PLAYER_TWO_PIECE,\r\n            selected: []\r\n        }\r\n    },\r\n    board: initBoardArray\r\n};\r\n\r\nexport const newPlayer = (isComputer, piece, score = 0, highScore = 0) => {\r\n    const displayName = piece === PLAYER_ONE_PIECE \r\n        ? (\r\n            isComputer \r\n            ? `Player 1 - Computer`\r\n            : `Player 1`\r\n        )\r\n        : (\r\n            isComputer\r\n            ? `Player 2 - Computer`\r\n            : `Player 2`\r\n        );\r\n    return {\r\n        isComputer,\r\n        displayName,\r\n        score,\r\n        highScore,\r\n        piece,\r\n        selected: []\r\n    };\r\n}\r\n\r\nexport const BLOCK_POINTS = 1;\r\n\r\nexport const WIN_POINTS = 10;\r\n\r\nexport const DRAW_PONTS = 5;\r\n\r\nexport const RESET_DELAY_MS = 750;\r\n","import React, { createContext, useReducer } from 'react';\r\nimport AppReducer from './AppReducer';\r\n\r\nimport {\r\n        initialState,\r\n        initBoardArray,\r\n        PLAYER_ONE_CODE,\r\n        PLAYER_TWO_CODE,\r\n        newPlayer \r\n    } from '../constants/GameState';\r\n\r\n// Initial State\r\n\r\n\r\n// Create context\r\nexport const GameContext = createContext(initialState);\r\n\r\n// Provider component\r\nexport const GlobalProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n    // Actions\r\n\r\n    /**\r\n     * Updates whether to show the modal or not\r\n     * @param {boolean} show \r\n     */\r\n    function updateModal(show){\r\n        dispatch({\r\n            type: 'UPDATE_MODAL',\r\n            payload: {\r\n                show\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the board and the players.selected property\r\n     * @param {string[]} updatedBoard \r\n     * @param {object} players \r\n     */\r\n    function updateBoard(updatedBoard, players){\r\n        dispatch({\r\n            type: 'UPDATE_BOARD',\r\n            payload: {\r\n                updatedBoard,\r\n                players\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * advances the turn\r\n     * @param {string} playerKey \r\n     */\r\n    function nextTurn(playerKey){\r\n        dispatch({\r\n            type: 'NEXT_TURN',\r\n            payload: {\r\n                currentPlayerTurn: playerKey\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates the score property of the players object in state\r\n     * @param {object} players - same as gameState.players / state.players\r\n     */\r\n    function updateScore(players){\r\n        dispatch({\r\n            type: 'UPDATE_SCORE',\r\n            payload:{\r\n                players\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * resets the game board, but keeps the scores\r\n     */\r\n    function resetGame(){\r\n        const players = {...state.players};\r\n        players.one.selected = [];\r\n        players.two.selected = [];\r\n\r\n        dispatch({\r\n            type: 'RESET_GAME',\r\n            payload: {\r\n                players,\r\n                currentPlayerTurn: PLAYER_ONE_CODE,\r\n                board: initBoardArray\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Select player to start the game as\r\n     * @param {string} playerCode - either PLAYER_ONE_CODE or PLAYER_TWO_CODE\r\n     */\r\n    function selectPlayer(playerCode){\r\n        const otherPlayer = playerCode === PLAYER_ONE_CODE ? PLAYER_TWO_CODE : PLAYER_ONE_CODE;\r\n        const players = {...state.players};\r\n\r\n        players[playerCode] = newPlayer(false, players[playerCode].piece);\r\n        players[otherPlayer] = newPlayer(true, players[otherPlayer].piece);\r\n\r\n        dispatch({\r\n            type: 'SET_PLAYER',\r\n            payload: {\r\n                players\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * swap player 1 and 2 control and scoring/displayName details\r\n     */\r\n    function swapPlayer(){\r\n        const players = {...state.players};\r\n        players.one.selected = [];\r\n        players.two.selected = [];\r\n\r\n        players.one.isComputer = !players.one.isComputer;\r\n        players.two.isComputer = !players.two.isComputer;\r\n\r\n        const oneScoreHolder = players.one.score;\r\n        const oneHighScoreHolder = players.one.highScore;\r\n\r\n        players.one.score = players.two.score;\r\n        players.one.highScore = players.two.highScore;\r\n\r\n        players.two.score = oneScoreHolder;\r\n        players.two.highScore = oneHighScoreHolder;\r\n\r\n        players.one.displayName = players.one.isComputer ? `Player 1 - Computer` : `Player 1`;\r\n        players.two.displayName = players.two.isComputer ? `Player 2 - Computer` : `Player 2`;\r\n\r\n        dispatch({\r\n            type: 'RESET_GAME',\r\n            payload: {\r\n                players,\r\n                currentPlayerTurn: PLAYER_ONE_CODE,\r\n                board: initBoardArray\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <GameContext.Provider value={{\r\n            updateModal,\r\n            updateBoard,\r\n            nextTurn,\r\n            selectPlayer,\r\n            updateScore,\r\n            resetGame,\r\n            swapPlayer,\r\n            gameState: state\r\n        }}>\r\n            {children}\r\n        </GameContext.Provider>\r\n    );\r\n}","import {PLAYER_ONE_PIECE, PLAYER_TWO_PIECE} from '../constants/GameState';\r\n\r\n/**\r\n * Return array of empty indices in the board array\r\n * @param {string[]} board - array of board selections\r\n */\r\nfunction emptyIndecies(board) {\r\n    let retArr = [];\r\n    board.map( (slot, index) => {\r\n        if(slot !== PLAYER_ONE_PIECE && slot !== PLAYER_TWO_PIECE){\r\n            retArr.push(index);\r\n        }\r\n        return true; //expected return inside arrow method\r\n    });\r\n\r\n    return retArr;\r\n}\r\n\r\n/**\r\n * Return whether the board configuration has a winning condition\r\n * brute-force winning conditions since there are only 8\r\n * @param {string[]} board - array of board selections\r\n * @param {string} playerPiece - player piece we want to check for wins\r\n */\r\nfunction winning(board, playerPiece){\r\n    return (\r\n        (board[0] === playerPiece && board[1] === playerPiece && board[2] === playerPiece) ||\r\n        (board[3] === playerPiece && board[4] === playerPiece && board[5] === playerPiece) ||\r\n        (board[6] === playerPiece && board[7] === playerPiece && board[8] === playerPiece) ||\r\n        (board[0] === playerPiece && board[3] === playerPiece && board[6] === playerPiece) ||\r\n        (board[1] === playerPiece && board[4] === playerPiece && board[7] === playerPiece) ||\r\n        (board[2] === playerPiece && board[5] === playerPiece && board[8] === playerPiece) ||\r\n        (board[0] === playerPiece && board[4] === playerPiece && board[8] === playerPiece) ||\r\n        (board[2] === playerPiece && board[4] === playerPiece && board[6] === playerPiece)\r\n      );\r\n}\r\n\r\n/**\r\n * Use the MiniMax algorithm to choose the best move for the computer player\r\n * solid explanation here: https://medium.com/@alialaa/tic-tac-toe-with-javascript-es2015-ai-player-with-minimax-algorithm-59f069f46efa\r\n * @param {string[]} boardArr \r\n * @param {string} computerPiece \r\n * @param {string} playerPiece \r\n * @param {string} currentPiece \r\n */\r\nfunction miniMax(boardArr, computerPiece, playerPiece, currentPiece){\r\n    //effectively, this plays itself out from the initial passed in board and selects the \r\n    // highest scoring (most likely to win) position for itself while minimizing the \r\n    // score for the opponent player\r\n    const availableSpots = emptyIndecies(boardArr);\r\n\r\n    if( winning(boardArr, playerPiece) ){\r\n        //opp wins board case\r\n        return { score: -100 };\r\n    }\r\n    else if( winning(boardArr, computerPiece) ){\r\n        //comp wins board case\r\n        return { score: 100 };\r\n    }\r\n    else if(availableSpots.length === 0){\r\n        //draw case\r\n        return { score: 0 };\r\n    }\r\n\r\n    const moves = [];\r\n\r\n    for(let i = 0; i < availableSpots.length; i++){\r\n        const move = {};\r\n        move.index = availableSpots[i];\r\n\r\n        //set the empty spot we're checking to the current player piece\r\n        boardArr[availableSpots[i]] = currentPiece;\r\n\r\n        if(currentPiece === computerPiece){\r\n            const result = miniMax(boardArr, computerPiece, playerPiece, playerPiece);\r\n            move.score = result.score;\r\n        }\r\n        else{\r\n            const result = miniMax(boardArr, computerPiece, playerPiece, computerPiece);\r\n            move.score = result.score;\r\n        }\r\n\r\n        boardArr[availableSpots[i]] = '';\r\n        moves.push(move);\r\n    }\r\n\r\n    var bestMove;\r\n    if(currentPiece === computerPiece){\r\n        let bestScore = -99999; //initialize to low number\r\n\r\n        for(let j = 0; j < moves.length; j++){\r\n            if(moves[j].score > bestScore){\r\n                bestScore = moves[j].score;\r\n                bestMove = j;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        let bestScore = 9999999; //initialize to high number\r\n\r\n        for(let j = 0; j < moves.length; j++){\r\n            if(moves[j].score < bestScore){\r\n                bestScore = moves[j].score;\r\n                bestMove = j;\r\n            }\r\n        }\r\n    }\r\n\r\n    return moves[bestMove];\r\n}\r\n\r\n/**\r\n * \r\n * @param {string[]} board \r\n * @param {string} computerPiece \r\n * @returns {number} - board array index of the computer's pick\r\n */\r\nexport function getComputerPick(board, computerPiece){\r\n    const playerPiece = computerPiece === PLAYER_ONE_PIECE ? PLAYER_TWO_PIECE : PLAYER_ONE_PIECE;\r\n    const move = miniMax(board, computerPiece, playerPiece, computerPiece);\r\n\r\n    return move.index;\r\n}\r\n\r\n/**\r\n * Determins if sub is a subArray of master.\r\n * AKA if master holds at least all of the items in sub\r\n * @param {string[]} sub \r\n * @param {string[]} master \r\n */\r\nexport const isWinSubArray = (sub, master) => {\r\n    let matches = 0;\r\n    let ret = false;\r\n    for(let index in sub){\r\n        if(master.indexOf(sub[index]) > -1){\r\n            matches += 1;\r\n            //We only care about 3 matches since it only takes 3 to win tic-tac-toe\r\n            if(matches >= 3){\r\n                ret = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}","import React, {useContext} from 'react';\r\n\r\nimport { GameContext } from '../../context/GameState';\r\n\r\nimport { BOARD_INDICES} from '../../constants/GameState';\r\n\r\nimport './Piece.css';\r\n\r\nfunction Piece(props) {\r\n\r\n    const {gameState} = useContext(GameContext);\r\n\r\n    const boardIndex = BOARD_INDICES[props.slotId];\r\n\r\n    return(\r\n        <span>\r\n            {gameState.board[boardIndex]}\r\n        </span>\r\n    );\r\n}\r\n\r\n\r\nexport default Piece;","import React, {useContext, useEffect} from 'react';\r\nimport './GameSpace.css';\r\n\r\nimport { GameContext } from '../../context/GameState';\r\n\r\nimport { \r\n    PLAYER_ONE_CODE, \r\n    PLAYER_ONE_PIECE,\r\n    PLAYER_TWO_CODE, \r\n    PLAYER_TWO_PIECE,\r\n    BOARD_INDICES,\r\n    BOARD_SLOTS,\r\n    WINNERS_BY_SLOT,\r\n    BLOCK_POINTS,\r\n    WIN_POINTS,\r\n    DRAW_PONTS,\r\n    RESET_DELAY_MS\r\n} from '../../constants/GameState'\r\n\r\nimport { getComputerPick, isWinSubArray } from '../../services/GameService';\r\n\r\nimport Piece from '../Piece/Piece';\r\n\r\nfunction GameSpace() {\r\n\r\n    const { gameState, \r\n            updateBoard,    \r\n            nextTurn,\r\n            updateScore,\r\n            resetGame\r\n        } = useContext(GameContext);\r\n    let board;\r\n    let player;\r\n\r\n\r\n    /**\r\n     * processes click after checking we're in the correct turn\r\n     * @param {string} id - slot id\r\n     */\r\n    const handleClick = (id) => {\r\n        //make sure they're not clicking during the computer's turn\r\n        if(!player.isComputer){\r\n            const boardIndex = BOARD_INDICES[id];\r\n            updateBoardProceedTurn(boardIndex);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get's computer's pick and updates the board/players\r\n     */\r\n    const takeComputerTurn = () => {\r\n        const boardIndex = getComputerPick(board, player.piece);\r\n        updateBoardProceedTurn(boardIndex);\r\n    }\r\n\r\n    /**\r\n     * Updates the board, checks for any point updates, and checks whether the game is over.\r\n     * It will reset if the game has ended.\r\n     * @param {number} boardIndex - index of which board cell to update\r\n     */\r\n    const updateBoardProceedTurn = (boardIndex) => {\r\n        // Only update if the slot isn't already selected\r\n        if(board[boardIndex] === \"\"){\r\n            //update the board\r\n            board[boardIndex] = player.piece;\r\n            //update players object with new selection\r\n            const players = gameState.players;\r\n            players[gameState.currentPlayerTurn].selected.push(boardIndex);\r\n            updateBoard(board, players);\r\n            \r\n            //Check for any scoring\r\n            checkForBlock( boardIndex, player.piece);\r\n\r\n            //Check if game is over\r\n            if(isGameOver()){\r\n                setTimeout(() => {\r\n                    resetGame();\r\n                }, RESET_DELAY_MS)\r\n            }\r\n            else{\r\n                const nextPlayer = gameState.currentPlayerTurn === PLAYER_ONE_CODE ? PLAYER_TWO_CODE : PLAYER_ONE_CODE;\r\n                nextTurn(nextPlayer);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines if the game has been won\r\n     */\r\n    const checkWinCondition = () => {\r\n        const selectedSlots = [];\r\n        player.selected.forEach( slotIndex => {\r\n            selectedSlots.push(BOARD_SLOTS[slotIndex]);\r\n        });\r\n\r\n        const win = selectedSlots.some( (selectedSlot, index) => {\r\n            const winners = WINNERS_BY_SLOT[selectedSlot];\r\n\r\n            for(const winner of winners){\r\n                if(isWinSubArray(winner, selectedSlots)){\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        });\r\n\r\n        return win;\r\n    }\r\n\r\n    /**\r\n     * Determines if the game is over\r\n     */\r\n    const isGameOver = () => {\r\n        const emptySlots = board.filter( slot => slot === '').length;\r\n        if(checkWinCondition()){\r\n            handleUpdateScore(WIN_POINTS);\r\n            handleScoreReset();\r\n            return true;\r\n        }\r\n        else if(emptySlots === 0){\r\n            handleUpdateScoreEqual(DRAW_PONTS);\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Determines if the most recent move blocked the opponent from winning and will award +1\r\n     * point if a block is detected\r\n     * @param {number} boardIndex \r\n     * @param {string} playerPiece \r\n     */\r\n    const checkForBlock = (boardIndex, playerPiece) => {\r\n        const slotId = BOARD_SLOTS[boardIndex];\r\n        const oppPiece = playerPiece === PLAYER_ONE_PIECE ? PLAYER_TWO_PIECE : PLAYER_ONE_PIECE;\r\n\r\n        const winners = WINNERS_BY_SLOT[slotId];\r\n        winners.forEach( winner => {\r\n            let blockCheck = 0;\r\n\r\n            winner.forEach( winSlotId => {\r\n                const winSlotIndex = BOARD_INDICES[winSlotId];\r\n\r\n                if(board[winSlotIndex] === oppPiece){\r\n                    blockCheck += 1;\r\n                }\r\n            });\r\n\r\n            if(blockCheck === 2){\r\n                handleUpdateScore(BLOCK_POINTS);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Updates the score for a single player.\r\n     * @param {number} scoreChange \r\n     */\r\n    const handleUpdateScore = (scoreChange) => {\r\n        const players = {...gameState.players};\r\n\r\n        const currentPlayer = players[gameState.currentPlayerTurn]\r\n\r\n        currentPlayer.score += scoreChange;\r\n\r\n        if(currentPlayer.score > currentPlayer.highScore){\r\n            currentPlayer.highScore = currentPlayer.score;\r\n        }\r\n\r\n        updateScore(players);\r\n    }\r\n\r\n    /**\r\n     * Updates the score equally for both players.\r\n     * @param {number} scoreChange \r\n     */\r\n    const handleUpdateScoreEqual = (scoreChange) => {\r\n        const players = {...gameState.players};\r\n\r\n        players.one.score += scoreChange;\r\n        players.two.score += scoreChange;\r\n\r\n        if(players.one.score > players.one.highScore){\r\n            players.one.highScore = players.one.score;\r\n        }\r\n        if(players.two.score > players.two.highScore){\r\n            players.two.highScore = players.two.score;\r\n        }\r\n\r\n        updateScore(players);\r\n    }\r\n\r\n    /**\r\n     * Resets the score when a player loses.\r\n     */\r\n    const handleScoreReset = () => {\r\n        const players = {...gameState.players};\r\n        const otherPlayer = gameState.currentPlayerTurn === PLAYER_ONE_CODE ? players[PLAYER_TWO_CODE] : players[PLAYER_ONE_CODE];\r\n\r\n        otherPlayer.score = 0;\r\n\r\n        updateScore(players);\r\n    }\r\n\r\n    useEffect(() => {\r\n        board = [...gameState.board];\r\n        player = {...gameState.players[gameState.currentPlayerTurn]};\r\n\r\n        if(player.isComputer){\r\n            takeComputerTurn();\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div id=\"play-area\">\r\n            <div id=\"top-row\" className=\"row\">\r\n                <div className=\"left-col col\" id=\"A\" onClick={(e) => { handleClick(e.target.id) }}>\r\n                    <Piece slotId=\"A\" />\r\n                </div>\r\n                <div className=\"mid-col col\" id=\"B\" onClick={(e) => { handleClick(e.target.id) }}>\r\n                    <Piece slotId=\"B\" />\r\n                </div>\r\n                <div className=\"right-col col\" id=\"C\" onClick={(e) => { handleClick(e.target.id) }}>\r\n                    <Piece slotId=\"C\" />\r\n                </div>\r\n            </div>\r\n            <div id=\"mid-row\" className=\"row\">\r\n                <div className=\"left-col col\" id=\"D\" onClick={(e) => { handleClick(e.target.id) }}>\r\n                    <Piece slotId=\"D\" />\r\n                </div>\r\n                <div className=\"mid-col col\" id=\"E\" onClick={(e) => { handleClick(e.target.id) }}>\r\n                    <Piece slotId=\"E\" />\r\n                </div>\r\n                <div className=\"right-col col\" id=\"F\" onClick={(e) => { handleClick(e.target.id) }}>\r\n                    <Piece slotId=\"F\" />\r\n                </div>\r\n            </div>\r\n            <div id=\"bot-row\" className=\"row\">\r\n                <div className=\"left-col col\" id=\"G\" onClick={(e) => { handleClick(e.target.id) }}>\r\n                    <Piece slotId=\"G\" />\r\n                </div>\r\n                <div className=\"mid-col col\" id=\"H\" onClick={(e) => { handleClick(e.target.id) }}>\r\n                    <Piece slotId=\"H\" />\r\n                </div>\r\n                <div className=\"right-col col\" id=\"I\" onClick={(e) => { handleClick(e.target.id) }}>\r\n                    <Piece slotId=\"I\" />\r\n                </div>\r\n            </div>      \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameSpace;","import React, {useContext} from 'react';\r\nimport './ChalkBoard.css';\r\n\r\nimport { GameContext } from '../../context/GameState';\r\n\r\nimport GameSpace from '../GameSpace/GameSpace';\r\n\r\nfunction ChalkBoard() {\r\n\r\n  const {gameState, swapPlayer} = useContext(GameContext);\r\n\r\n  return (\r\n    <div id=\"chalkBoard\">\r\n      <div id=\"rules-container\">\r\n        <h2>Rules:</h2>\r\n        <hr />\r\n        <ol>\r\n          <li>X plays first.</li>\r\n          <li>+10 points for a win.</li>\r\n          <li>+5 points for a draw.</li>\r\n          <li>+1 point for a block.</li>\r\n          <li>Lose all points on a loss.</li>\r\n        </ol>\r\n        <hr />\r\n      </div>\r\n      <GameSpace />\r\n      <div id=\"score-area\">\r\n        <div id=\"player-one-score-container\">\r\n          <h5>{gameState.players.one.displayName}</h5>\r\n          <span>Score: {gameState.players.one.score}</span>\r\n          <span>High Score: {gameState.players.one.highScore}</span>\r\n        </div>\r\n        <div id=\"player-two-score-container\">\r\n          <h5>{gameState.players.two.displayName}</h5>\r\n          <span>Score: {gameState.players.two.score}</span>\r\n          <span>High Score: {gameState.players.two.highScore}</span>\r\n        </div>\r\n      </div>\r\n      <div id=\"eraser\">\r\n        <div id=\"eraser-top\"></div>\r\n        <div id=\"eraser-bottom\"></div>\r\n      </div>\r\n      <div id=\"swap-btn-container\">\r\n        <button id=\"swap-btn\" onClick={() => { swapPlayer(); }}>Swap Players</button>\r\n      </div>\r\n    </div>\r\n  );\r\n  }\r\n  \r\n  export default ChalkBoard;","import React from 'react';\r\n\r\nconst Modal = ({show, children}) => {\r\n    const showHideClassName = show ? \"modal\" : \"modal hide\";\r\n\r\n    return (\r\n        <div className={showHideClassName}>\r\n            <section className=\"modal-main\">\r\n                {children}\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Modal;","import React, {useContext} from 'react';\nimport './Game.css';\n\nimport { GameContext } from './context/GameState';\n\nimport { PLAYER_ONE_CODE, PLAYER_TWO_CODE } from './constants/GameState';\n\nimport ChalkBoard from './components/ChalkBoard/ChalkBoard';\nimport Modal from './components/Modal/Modal'\n\nfunction Game() {\n\n  const {gameState, selectPlayer, updateModal} = useContext(GameContext);\n\n  const showModal = gameState.showModal\n\n  const handleSelection = (playerCode) => {\n    selectPlayer(playerCode);\n    updateModal(false);\n  }\n\n  return (\n    <div id=\"game\">\n      <ChalkBoard />\n      <Modal show={showModal}> \n        <h1>React-Tac-Toe</h1>\n        <h2>Choose X's or O's</h2>\n        <button className=\"modal-btn\" onClick={() => handleSelection(PLAYER_ONE_CODE)}>X</button>\n        <button className=\"modal-btn\" onClick={() => handleSelection(PLAYER_TWO_CODE)}>O</button>\n      </Modal>\n    </div>\n  );\n}\n\nexport default Game;\n","import React from 'react';\r\nimport { GlobalProvider } from './context/GameState';\r\n\r\nimport Game from './Game';\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <GlobalProvider>\r\n            <Game />\r\n        </GlobalProvider>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}